package com.example.user.newapp.encodedFiles;

/**
 * Created by Seyfullah Semen on 25-7-2017.
 */

public class EncodedBase {
 /**
  * this is our very own mraid.js file
  * we have encoded this file to bas64 and later we can encode it from base64 to a java readable file
  */
 public static final String mraidFile = "";

}
